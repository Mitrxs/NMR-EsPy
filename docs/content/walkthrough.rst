Example Walk-through
====================

This page provides an outline of basic NMR-EsPy usage.  If you intend to only
to use the graphical user interface, this page won't be useful: :doc:`follow
this link <gui/index>`.

As an illustration of the typical steps involved in using NMR-EsPy, we will
consider an example dataset that ships with TopSpin 4. Assuming you installed
TopSpin in the default path, this should be present in the path:

* Linux: ``/opt/topspin4.x.y/examdata/exam1d_1H/1/pdata/1``
* Windows: ``C:\Bruker\TopSpin4.x.y\examdata\exam1d_1H\1\pdata\1``

In what follows, as I am using TopSpin 4.0.8, I shall be replacing
``topspin4.x.y`` with ``topspin4.0.8``.

I recommend that you follow this walk-through using a Python interpreter to
ensure everything runs smoothly on your system.

This walk-through provides a fairly bare-bones description of the key
features of NMR-EsPy. For a rigorous description of the API, you should
consult the :doc:`Reference <references/index>` afterwards.

TL;DR: A Full Script
^^^^^^^^^^^^^^^^^^^^

Think you'll be okay by inspecting an example script and then looking at the
reference? Here is a script which does pretty much everything covered below:

.. literalinclude:: walkthrough_script.py

See `Generated Files`_ to view the files generated by this script.

Generating an Estimator instance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To get started, it is necessary to import an appropriate estimation class. For
1D data, this is :py:class:`nmrespy.Estimator1D` A new instance of this class
for considering Bruker data is initialised using
:py:meth:`~nmrespy.Estimator1D.new_bruker`:

.. code:: python3

    >>> from nmrespy import Estimator1D
    >>> # Specify the path containing the 1r file
    >>> path = "/opt/topspin4.0.8/examdata/exam1d_1H/1/pdata/1"
    >>> estimator = Estimator1D.new_bruker(path)
    >>> estimator
    <nmrespy.estimators.onedim.Estimator1D object at 0x7f73ae1db850>

An interactive plot of the data, in the frequency domain, can be seen using the
:py:meth:`~nmrespy.Estimator1D.view_data` method:

.. code:: python3

   >>> estimator.view_data()

.. only:: html

  .. image:: media/walkthrough/view_data.png
     :align: center
     :scale: 40%

.. only:: latex

  .. image:: media/walkthrough/view_data.png
    :align: center
    :width: 450

Estimating the Signal Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To generate a parameter estimate, the :py:meth:`~nmrespy.Estimator1D.estimate`
method is used.  In almost all circumstances, it is suggested that you select a
small frequency region that is of interest using the ``region`` argument. On
top of this, you will need to specify a suitable value for ``noise_region``,
which should be a frequency region within which no discernible peaks reside.
Multiple calls can be made to the method, with each result being saved
successively. In this example, 2 regions will be considered:

1. 5.285 - 5.18ppm
2. 5.54 - 5.42ppm

The estimation proceeds by generating an initial guess using the :doc:`Matrix
Pencil Method <references/mpm>`. Following this, a :doc:`non-linear
optimisation routine <references/nlp>` is carried out to generate a final
result. With signals that have been derived from well-phased data, such as
spectral data in ``1r`` files, it is recommended that the ``phase_variance``
kwarg is set to ``True``.

.. code:: pycon

    >>> regions = ((5.285, 5.18), (5.54, 5.42))
    >>> noise_region = (6.48, 6.38)
    >>> for region in regions:
    ...     estimator.estimate(region, noise_region, region_unit="ppm", phase_variance=True)

Inspecting Estimation Results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Result tables and figures can both easily be generated using the
:py:meth:`~nmrespy.Estimator1D.write_result` and
:py:meth:`~nmrespy.Estimator1D.plot_result` methods, respectively.

.. code:: pycon

    >>> for fmt in ("txt", "pdf"):
    ...     estimator.write_result(path="result", fmt=fmt)
    ...
    Saved file example_result.txt.
    Saved file example_result.tex.
    Saved file example_result.pdf.
    You can view and customise the corresponding TeX file at example_result.tex.
    >>> plots = estimator.plot_result()
    >>> plots
    [<nmrespy.plot.ResultPlotter object at 0x7f4f38c71710>, <nmrespy.plot.ResultPlotter object at 0x7f4f4ffb5310>]
    >>> for region, plot in zip(regions, plots):
    ...     path = f"{region[0]}-{region[1]}".replace(".", "_")
    ...     plot.save(path, fmt="png", dpi=600)
    ...
    Saved file 5_285-5_18.png
    Saved file 5_54-5_42.png

Miscellaneous
^^^^^^^^^^^^^

A log of method calls made by the estimator can be output output to the
terminal, or saved to a file, using :py:meth:`~nmrespy.Estimator1D.view_log`
and :py:meth:`~nmrespy.Estimator1D.save_log`, respectively.

.. code:: pycon

    >>> estimator.view_log
    =====================
    Logfile for Estimator
    =====================
    --> Created @ 13-04-22 11:20:23
    --> `estimate` ((5.285, 5.18), (6.48, 6.38)) {'region_unit': 'ppm', 'phase_variance': True}
    --> `estimate` ((5.54, 5.42), (6.48, 6.38)) {'region_unit': 'ppm', 'phase_variance': True}
    --> `write_result` () {'path': 'result', 'fmt': 'txt'}
    --> `write_result` () {'path': 'result', 'fmt': 'pdf'}
    --> `plot_result` () {}

    >>> estimator.save_log(path="logfile")
    Saved file logfile.log

The estimator object can be stored as a byte-stream using
:py:meth:`~nmrespy.Estimator1D.to_pickle` protocol, enabling it to be re-loaded
at a later time.

.. code:: pycon

    >>> estimator.to_pickle(path="estimator")
    Saved file estimator.pkl

The pickled estimator can be re-loaded using :py:meth:`~nmrespy.Estimator1D.from_pickle`:

.. code:: pycon

    >>> estimator_cp = Estimator1D.from_pickle(path="estimator")
    >>> estimator_cp
    <nmrespy.estimators.onedim.Estimator1D object at 0x7f46f5772fd0>

Generated Files
^^^^^^^^^^^^^^^

The files generated from the example (except the pickled estimator) are as follows:

* :download:`walkthrough_script.py`
* :download:`result.txt <media/walkthrough/result.txt>`
* :download:`result.tex <media/walkthrough/result.tex>`
  (generated by :py:meth:`~nmrespy.Estimator1D.write_result` with ``fmt``
  set to ``"pdf"``)
* :download:`result.pdf <media/walkthrough/result.pdf>`
* :download:`5_285-5_18.png <media/walkthrough/5_285-5_18.png>`
* :download:`5_54-5_42.png <media/walkthrough/5_54-5_42.png>`
* :download:`logfile.log <media/walkthrough/logfile.log>`
