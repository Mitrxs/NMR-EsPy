# setup_jres.py
# Simon Hulse
# simon.hulse@chem.ox.ac.uk
# Last Edited: Mon 17 Oct 2022 17:37:36 BST

from tkinter import ttk

from matplotlib.backends import backend_tkagg
import matplotlib.pyplot as plt
import numpy as np

import nmrespy as ne
from nmrespy.app import config as cf, custom_widgets as wd
from nmrespy.app.stup import Setup1DType


class Setup2DJ(Setup1DType):
    def __init__(self, ctrl):
        super().__init__(ctrl)

    def conv_1d(self, value, conversion):
        return self.estimator.convert([None, value], conversion)[-1]

    def construct_gui_frames(self):
        super().construct_gui_frames()
        self.plot_notebook = ttk.Notebook(self.plot_frame)
        self.onedim_frame = wd.MyFrame(self.plot_notebook)
        self.jres_frame = wd.MyFrame(self.plot_notebook)
        self.contour_frame = wd.MyFrame(self.notebook, bg=cf.NOTEBOOKCOLOR)

    def place_gui_frames(self):
        super().place_gui_frames()
        self.plot_notebook.add(
            self.onedim_frame,
            text="1D",
            sticky="nsew",
        )
        self.plot_notebook.add(
            self.jres_frame,
            text="2DJ",
            sticky="nsew",
        )
        self.plot_notebook.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        self.notebook.add(
            self.contour_frame,
            text="Contour levels",
            sticky="nsew",
            state="disabled",
        )

    def configure_gui_frames(self):
        super().configure_gui_frames()
        for frame in (self.onedim_frame, self.jres_frame):
            frame.columnconfigure(0, weight=1)
            frame.rowconfigure(0, weight=1)

    def construct_1d_figure(self):
        super().construct_1d_figure(
            self.onedim_frame,
            self.estimator.spectrum_zero_t1.real,
        )

    def construct_2d_figure(self):
        self.fig_2d, self.ax_2d = plt.subplots(
            figsize=(6, 3.5),
            dpi=170,
        )
        self.ax_2d.set_xlim(self.lims[-1])
        self.ax_2d.set_ylim(self.lims[0])
        # self.lims generated by `construct_1d_figure`
        cf.Restrictor(self.ax_2d, x_bounds=self.lims[-1], y_bounds=self.lims[0])

        # Aesthetic tweaks
        self.fig_2d.patch.set_facecolor(cf.BGCOLOR)
        self.ax_2d.set_facecolor(cf.PLOTCOLOR)
        self.ax_2d.set_xlabel(
            f"{self.estimator.unicode_nuclei[-1]} (ppm)", fontsize=8,
        )
        self.ax_2d.set_ylabel("Hz", fontsize=8)
        self.ax_2d.locator_params(axis="x", nbins=10)
        self.ax_2d.tick_params(axis="x", which="major", labelsize=6)
        for direction in ("top", "bottom", "left", "right"):
            self.ax_2d.spines[direction].set_color("k")

        self.spec_contour = self.ax_2d.contour(
            self.shifts[-1],
            self.shifts[0],
            np.abs(self.estimator.spectrum).real,
            colors="k",
            linewidths=0.5,
        )

        self.canvas_2d = backend_tkagg.FigureCanvasTkAgg(
            self.fig_2d,
            master=self.jres_frame,
        )
        self.canvas_2d.get_tk_widget().grid(row=0, column=0, sticky="nsew")

        self.toolbar_2d = wd.MyNavigationToolbar(
            self.canvas_2d,
            parent=self.jres_frame,
        )
        self.toolbar_2d.grid(row=1, column=0, padx=(10, 0), pady=(0, 5), sticky="w")

    def configure_notebooks(self):
        super().configure_notebooks()
        self.plot_notebook.bind(
            "<<NotebookTabChanged>>",
            lambda event: self.switch_plot_tab(),
        )

    def update_spectrum(self):
        p0 = (0., self.p0["rad"])
        p1 = (0., self.p1["rad"])
        pivot = (0., self.pivot["idx"])
        data_1d = self.estimator.data[0]
        data_1d = ne.sig.exp_apodisation(data_1d, self.lb)
        data_1d[0] *= 0.5
        self.spec_line.set_ydata(
            ne.sig.phase(ne.sig.ft(data_1d), [p0[-1]], [p1[-1]], [pivot[-1]]).real
        )
        self.canvas_1d.draw_idle()

    def switch_main_tab(self):
        tab = super().switch_main_tab()
        state = "disabled" if tab == 0 else "normal"
        self.plot_notebook.tab(1, state=state)
        if (
            state == "disabled" and
            self.plot_notebook.index(self.plot_notebook.select()) == 1
        ):
            self.plot_notebook.select(0)

    def switch_plot_tab(self):
        tab = self.plot_notebook.index(self.plot_notebook.select())
        state = "disabled" if tab == 0 else "normal"
        self.notebook.tab(3, state=state)
